import api from '../lib/api';
import { logger } from '../lib/logger';
import type { 
  ApiResponse, 
  UsuarioTipo,
  Usuario 
} from '../types/api';

export interface CriarUsuarioRequest {
  nome_usuario: string;
  email_usuario: string;
  senha_usuario: string;
  tipo_usuario_id: string;
}

export interface CriarUsuarioResponse {
  usuario: Usuario;
}

export const usuarioService = {
  // üîç BUSCAR TIPOS DE USU√ÅRIO - Lista todos os tipos dispon√≠veis
  async buscarTiposUsuario(): Promise<UsuarioTipo[]> {
    try {
      logger.info('üîç Buscando tipos de usu√°rio...', 'service');
      logger.apiRequest('GET', '/usuario-tipo');
      
      const response = await api.get('/usuario-tipo');
      
      logger.apiResponse(response.status, '/usuario-tipo');
      logger.success('Tipos de usu√°rio carregados com sucesso', 'service');
      
      // O backend retorna { status, mensagem, dados }
      return response.data.dados || [];
    } catch (error: any) {
      logger.apiResponse(error.response?.status || 500, '/usuario-tipo', error.response?.data);
      logger.error(`Erro ao buscar tipos de usu√°rio: ${error.response?.data?.mensagem || error.message}`, 'service');
      
      throw error;
    }
  },

  // üë§ CRIAR USU√ÅRIO - Criar novo usu√°rio no sistema
  async criarUsuario(dados: CriarUsuarioRequest): Promise<ApiResponse<CriarUsuarioResponse>> {
    try {
      logger.info('üë§ Criando novo usu√°rio...', 'service');
      logger.apiRequest('POST', '/auth/registrar', { 
        nome_usuario: dados.nome_usuario,
        email_usuario: dados.email_usuario,
        tipo_usuario_id: dados.tipo_usuario_id
      });
      
      const response = await api.post('/auth/registrar', dados);
      
      logger.apiResponse(response.status, '/auth/registrar');
      logger.success('Usu√°rio criado com sucesso', 'service');
      
      // O backend retorna { mensagem: string, usuario: Usuario }
      // Precisamos transformar para o formato ApiResponse esperado
      return {
        status: 'sucesso',
        mensagem: response.data.mensagem,
        dados: {
          usuario: response.data.usuario
        }
      };
    } catch (error: any) {
      logger.apiResponse(error.response?.status || 500, '/auth/registrar', error.response?.data);
      logger.error(`Erro ao criar usu√°rio: ${error.response?.data?.mensagem || error.message}`, 'service');
      
      throw error;
    }
  },

  // üìã LISTAR USU√ÅRIOS - Lista todos os usu√°rios
  async listarUsuarios(): Promise<ApiResponse<Usuario[]>> {
    try {
      logger.info('üìã Listando usu√°rios...', 'service');
      logger.apiRequest('GET', '/usuarios');
      
      const response = await api.get('/usuarios');
      
      logger.apiResponse(response.status, '/usuarios');
      logger.success('Usu√°rios carregados com sucesso', 'service');
      
      // O backend retorna { usuarios: Usuario[] }
      // Precisamos transformar para o formato ApiResponse esperado
      return {
        status: 'sucesso',
        mensagem: 'Usu√°rios carregados com sucesso',
        dados: response.data.usuarios || response.data
      };
    } catch (error: any) {
      logger.apiResponse(error.response?.status || 500, '/usuarios', error.response?.data);
      logger.error(`Erro ao listar usu√°rios: ${error.response?.data?.mensagem || error.message}`, 'service');
      
      throw error;
    }
  },

  // üîç BUSCAR USU√ÅRIO POR ID - Buscar usu√°rio espec√≠fico
  async buscarUsuarioPorId(usuarioId: string): Promise<ApiResponse<Usuario>> {
    try {
      logger.info(`üîç Buscando usu√°rio: ${usuarioId}`, 'service');
      logger.apiRequest('GET', `/usuarios/${usuarioId}`);
      
      const response = await api.get(`/usuarios/${usuarioId}`);
      
      logger.apiResponse(response.status, `/usuarios/${usuarioId}`);
      logger.success('Usu√°rio encontrado com sucesso', 'service');
      
      return {
        status: 'sucesso',
        mensagem: 'Usu√°rio encontrado com sucesso',
        dados: response.data.usuario || response.data
      };
    } catch (error: any) {
      logger.apiResponse(error.response?.status || 500, `/usuarios/${usuarioId}`, error.response?.data);
      logger.error(`Erro ao buscar usu√°rio: ${error.response?.data?.mensagem || error.message}`, 'service');
      
      throw error;
    }
  },

  // ‚úèÔ∏è ATUALIZAR USU√ÅRIO - Atualizar dados do usu√°rio
  async atualizarUsuario(usuarioId: string, dados: Partial<CriarUsuarioRequest>): Promise<ApiResponse<Usuario>> {
    try {
      logger.info(`‚úèÔ∏è Atualizando usu√°rio: ${usuarioId}`, 'service');
      logger.apiRequest('PUT', `/usuarios/${usuarioId}`, dados);
      
      const response = await api.put(`/usuarios/${usuarioId}`, dados);
      
      logger.apiResponse(response.status, `/usuarios/${usuarioId}`);
      logger.success('Usu√°rio atualizado com sucesso', 'service');
      
      return {
        status: 'sucesso',
        mensagem: 'Usu√°rio atualizado com sucesso',
        dados: response.data.usuario || response.data
      };
    } catch (error: any) {
      logger.apiResponse(error.response?.status || 500, `/usuarios/${usuarioId}`, error.response?.data);
      logger.error(`Erro ao atualizar usu√°rio: ${error.response?.data?.mensagem || error.message}`, 'service');
      
      throw error;
    }
  },

  // üóëÔ∏è EXCLUIR USU√ÅRIO - Excluir usu√°rio
  async excluirUsuario(usuarioId: string): Promise<ApiResponse<void>> {
    try {
      logger.info(`üóëÔ∏è Excluindo usu√°rio: ${usuarioId}`, 'service');
      logger.apiRequest('DELETE', `/usuarios/${usuarioId}`);
      
      const response = await api.delete(`/usuarios/${usuarioId}`);
      
      logger.apiResponse(response.status, `/usuarios/${usuarioId}`);
      logger.success('Usu√°rio exclu√≠do com sucesso', 'service');
      
      return {
        status: 'sucesso',
        mensagem: 'Usu√°rio exclu√≠do com sucesso'
      };
    } catch (error: any) {
      logger.apiResponse(error.response?.status || 500, `/usuarios/${usuarioId}`, error.response?.data);
      logger.error(`Erro ao excluir usu√°rio: ${error.response?.data?.mensagem || error.message}`, 'service');
      
      throw error;
    }
  },

  // üè∑Ô∏è TIPOS DE USU√ÅRIO - Gerenciamento de tipos

  // üìã LISTAR TIPOS DE USU√ÅRIO - Lista todos os tipos
  async listarTiposUsuario(): Promise<ApiResponse<UsuarioTipo[]>> {
    try {
      logger.info('üìã Listando tipos de usu√°rio...', 'service');
      logger.apiRequest('GET', '/usuario-tipo');
      
      const response = await api.get('/usuario-tipo');
      
      logger.apiResponse(response.status, '/usuario-tipo');
      logger.success('Tipos de usu√°rio carregados com sucesso', 'service');
      
      return {
        status: 'sucesso',
        mensagem: 'Tipos de usu√°rio carregados com sucesso',
        dados: response.data
      };
    } catch (error: any) {
      logger.apiResponse(error.response?.status || 500, '/usuario-tipo', error.response?.data);
      logger.error(`Erro ao listar tipos de usu√°rio: ${error.response?.data?.mensagem || error.message}`, 'service');
      
      throw error;
    }
  },

  // ‚ûï CRIAR TIPO DE USU√ÅRIO - Criar novo tipo
  async criarTipoUsuario(dados: { nome_tipo: string }): Promise<ApiResponse<UsuarioTipo>> {
    try {
      logger.info('‚ûï Criando novo tipo de usu√°rio...', 'service');
      logger.apiRequest('POST', '/usuario-tipo', dados);
      
      const response = await api.post('/usuario-tipo', dados);
      
      logger.apiResponse(response.status, '/usuario-tipo');
      logger.success('Tipo de usu√°rio criado com sucesso', 'service');
      
      return {
        status: 'sucesso',
        mensagem: 'Tipo de usu√°rio criado com sucesso',
        dados: response.data
      };
    } catch (error: any) {
      logger.apiResponse(error.response?.status || 500, '/usuario-tipo', error.response?.data);
      logger.error(`Erro ao criar tipo de usu√°rio: ${error.response?.data?.mensagem || error.message}`, 'service');
      
      throw error;
    }
  },

  // ‚úèÔ∏è ATUALIZAR TIPO DE USU√ÅRIO - Atualizar tipo existente
  async atualizarTipoUsuario(tipoId: string, dados: { nome_tipo: string }): Promise<ApiResponse<UsuarioTipo>> {
    try {
      logger.info(`‚úèÔ∏è Atualizando tipo de usu√°rio: ${tipoId}`, 'service');
      logger.apiRequest('PUT', `/usuario-tipo/${tipoId}`, dados);
      
      const response = await api.put(`/usuario-tipo/${tipoId}`, dados);
      
      logger.apiResponse(response.status, `/usuario-tipo/${tipoId}`);
      logger.success('Tipo de usu√°rio atualizado com sucesso', 'service');
      
      return {
        status: 'sucesso',
        mensagem: 'Tipo de usu√°rio atualizado com sucesso',
        dados: response.data
      };
    } catch (error: any) {
      logger.apiResponse(error.response?.status || 500, `/usuario-tipo/${tipoId}`, error.response?.data);
      logger.error(`Erro ao atualizar tipo de usu√°rio: ${error.response?.data?.mensagem || error.message}`, 'service');
      
      throw error;
    }
  },

  // üóëÔ∏è EXCLUIR TIPO DE USU√ÅRIO - Excluir tipo
  async excluirTipoUsuario(tipoId: string): Promise<ApiResponse<void>> {
    try {
      logger.info(`üóëÔ∏è Excluindo tipo de usu√°rio: ${tipoId}`, 'service');
      logger.apiRequest('DELETE', `/usuario-tipo/${tipoId}`);
      
      const response = await api.delete(`/usuario-tipo/${tipoId}`);
      
      logger.apiResponse(response.status, `/usuario-tipo/${tipoId}`);
      logger.success('Tipo de usu√°rio exclu√≠do com sucesso', 'service');
      
      return {
        status: 'sucesso',
        mensagem: 'Tipo de usu√°rio exclu√≠do com sucesso'
      };
    } catch (error: any) {
      logger.apiResponse(error.response?.status || 500, `/usuario-tipo/${tipoId}`, error.response?.data);
      logger.error(`Erro ao excluir tipo de usu√°rio: ${error.response?.data?.mensagem || error.message}`, 'service');
      
      throw error;
    }
  }
};
